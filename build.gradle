import com.github.jengelman.gradle.plugins.shadow.transformers.PropertiesFileTransformer
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.redline_rpm.header.Flags

buildscript {
    dependencies {
        classpath('com.google.cloud.tools:jib-native-image-extension-gradle:0.1.0')
        classpath 'io.github.fvarrui:javapackager:1.7.6'
    }
}

plugins {
    id 'java'
    id 'application'
    // https://github.com/spring-projects/spring-graphql/issues/924
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.hibernate.orm' version '6.5.3.Final'
    id 'org.graalvm.buildtools.native' version '0.10.1'
    id 'org.jetbrains.kotlin.jvm' version '1.9.22'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.22'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.22'
    id 'com.github.gmazzo.buildconfig' version '5.3.5'
    id "org.jetbrains.kotlin.plugin.allopen" version "1.9.22"
    id "com.google.cloud.tools.jib" version "3.4.1"
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "com.netflix.nebula.ospackage" version "11.10.0"
}
apply plugin: 'io.github.fvarrui.javapackager.plugin'

group = 'com.krillsson'
version = '0.35.1'

buildConfig {
    buildConfigField("String", "APP_VERSION", provider { "\"${project.version}\"" })
    buildConfigField("java.util.Date", "BUILD_TIME", "java.util.Date(" + System.currentTimeMillis() + "L)")
}

java {
    sourceCompatibility = '21'
}

allOpen {
    annotation("jakarta.persistence.Entity")
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
    flatDir {
        dirs 'lib'
    }
}

/**
 Gradle plugin doc: https://graalvm.github.io/native-build-tools/latest/gradle-plugin.html#configuration-options
 */
graalvmNative {
    metadataRepository {
        enabled = true
    }
    binaries {
        // https://www.graalvm.org/latest/reference-manual/native-image/metadata/AutomaticMetadataCollection/#tracing-agent
        // Add this in run configuration VM options: -agentlib:native-image-agent=config-merge-dir=META-INF/native-image
        main {
            buildArgs.add('--no-fallback')
            buildArgs.add('--report-unsupported-elements-at-runtime')
            buildArgs.add('-H:+JNI')
            buildArgs.add('-H:+ReportExceptionStackTraces')
            buildArgs.add('-H:+PrintAnalysisCallTree')
            buildArgs.add('--trace-class-initialization=ch.qos.logback.classic.Logger')
            buildArgs.add('--trace-object-instantiation=ch.qos.logback.core.AsyncAppenderBase$Worker')
            buildArgs.add('--initialize-at-build-time=org.slf4j.LoggerFactory,ch.qos.logback')
            buildArgs.add('--initialize-at-run-time=io.netty,sun.reflect.misc.Trampoline')
        }
    }
}

task jibJvm(type: com.google.cloud.tools.jib.gradle.BuildImageTask) {
    group = 'Docker'
    description = 'Creates image with jvm build'
    jibExtension = project.extensions.getByName('jib')
    dependsOn 'jar'
    doFirst {
        jib {
            container {
                ports = ["8080", "8443", "2375"]
                volumes = ["/config", "/data", "/var/run/docker.sock"]
            }
            from {
                image = 'krillsson/openjdk21-ubuntu-systemd:latest'
                platforms {
                    platform {
                        architecture = 'amd64'
                        os = 'linux'
                    }
                    platform {
                        architecture = 'arm64'
                        os = 'linux'
                    }
                }
            }
            def tag = findProperty("buildType") == "release" ? "latest" : "nightly"
            to.image = "krillsson/sys-api:$tag"
        }
    }
}

task jibNativeImage(type: com.google.cloud.tools.jib.gradle.BuildImageTask) {
    group = 'Docker'
    description = 'Creates image with native build'
    jibExtension = project.extensions.getByName('jib')
    dependsOn 'nativeCompile'
    doFirst {
        jib {
            container {
                ports = ["8080", "8443", "2375"]
                volumes = ["/config", "/data", "/var/run/docker.sock"]
            }
            jib.from {
                image = 'krillsson/openjdk21-ubuntu-systemd:latest'
            }
            def tag = findProperty("buildType") == "release" ? "native" : "native-nightly"
            to.image = "krillsson/sys-api:$tag"
            pluginExtensions {
                pluginExtension {
                    implementation = 'com.google.cloud.tools.jib.gradle.extension.nativeimage.JibNativeImageExtension'
                    properties = [
                            imageName: 'sysapi'
                    ]
                }
            }
        }
    }
}

shadowJar {
    mergeServiceFiles()
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    append 'META-INF/spring.handlers'
    append 'META-INF/spring.schemas'
    append 'META-INF/spring.tooling'
    archiveVersion.set('')
    transform(PropertiesFileTransformer) {
        paths = ['META-INF/spring.factories']
        mergeStrategy = "append"
    }
}

// put the config file in resource dir so supplying it becomes optional. Easing migration.
processResources {
    from("$rootDir/config") {
        into "/config"
        include '**'
    }
}

application {
    mainClass.set('com.krillsson.sysapi.SysAPIApplicationKt')
}

jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    manifest {
        attributes('Main-Class': 'com.krillsson.sysapi.SysAPIApplicationKt', "Implementation-Version": project.version)
    }
}

shadowDistZip {
    from("$rootDir/config/") {
        into "sysapi-shadow-${project.version}/config/"
        include '**'
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.graphql:spring-graphql:1.3.0'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.xerial:sqlite-jdbc:3.45.2.0'
    implementation 'org.hibernate.orm:hibernate-community-dialects'
    implementation 'com.github.docker-java:docker-java-core:3.4.0'
    implementation 'com.github.docker-java:docker-java-transport-httpclient5:3.4.0'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.9.0'
    implementation 'com.squareup.retrofit2:converter-jackson:2.9.0'
    implementation 'org.bitlet:weupnp:0.1.4'
    implementation 'org.jmdns:jmdns:3.5.1'
    implementation 'org.apache.commons:commons-exec:1.3'
    implementation 'commons-io:commons-io:2.18.0'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.1'
    implementation('com.github.oshi:oshi-core:6.6.6') {
        exclude group: "org.slf4j"
    }
    implementation name: 'jni4net.j-0.8.9.0', group: "net.sf.jni4net", version: "1"
    implementation name: 'OhmJniWrapper.j4n', group: "ohmwrapper", version: "1"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    implementation "org.springframework.boot:spring-boot-configuration-processor"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework:spring-webflux'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

ospackage {
    os = org.redline_rpm.header.Os.LINUX
    packageName 'sysapi'
    packageGroup 'utils'
    maintainer 'Krillsson'
    summary 'GraphQL API to your computers hardware'
    packageDescription '''
    Reference documentation can be found at
    https://github.com/Krillsson/sys-API
  '''.stripIndent().trim()
    url 'https://github.com/Krillsson/sys-API'

    user 'root'
    permissionGroup 'root'

    requires('openjdk-21-jre-headless').or('java-sdk-headless', "21", Flags.GREATER | Flags.EQUAL)

    requires('daemon')
}

task packageDeb(type: Deb) {
    postInstallFile file('src/deb/scripts/postinst')
    preUninstallFile file('src/deb/scripts/prerm')
    postUninstallFile file('src/deb/scripts/postrm')

    into('etc/init.d') {
        from('src/deb/etc/init.d') {
            include 'sys-api.init'
        }
    }

    into('/opt/sys-api/bin') {
        from('src/deb/opt/sys-api/bin') {
            include 'sys-api-server'
        }
    }

    into('lib/systemd/system') {
        from('src/deb/lib/systemd/system') {
            include 'sys-api.service'
        }
    }

    from(shadowJar.outputs.files) {
        into '/opt/sys-api/lib'
    }

    from('config') {
        fileType CONFIG | NOREPLACE
        into '/opt/sys-api/config'
    }

    from('src/deb/opt/sys-api/data') {
        createDirectoryEntry = true
        into '/opt/sys-api/data'
    }
}

task packageWindowsInstaller(type: io.github.fvarrui.javapackager.gradle.PackageTask, dependsOn: shadowJar) {
    displayName = "sys-API"
    organizationName = "Krillsson"
    mainClass = 'com.krillsson.sysapi.SysAPIApplicationKt'
    bundleJre = true
    customizedJre = false
    runnableJar = shadowJar.outputs.files.first()
    copyDependencies = false
    generateInstaller = true
    administratorRequired = true
    platform = "windows"
    additionalResources = [
            file("$rootDir/src/dist/lib"),
            file("$rootDir/src/dist/sample-queries"),
            file("$rootDir/config"),
            file("$rootDir/src/win/bin/sys-API-servicew.exe"),
            file("$rootDir/src/win/config/sys-API-servicew.xml"),
            file("$rootDir/src/win/scripts/install-service.bat"),
            file("$rootDir/src/win/scripts/start-service.bat"),
            file("$rootDir/src/win/scripts/stop-service.bat"),
            file("$rootDir/src/win/scripts/uninstall-service.bat")
    ]
    winConfig {
        headerType = "console"
        generateMsi = false
        generateMsm = false
        setupMode = "installForAllUsers"
        icoFile = file("$rootDir/src/win/assets/icon.ico")
    }
}

tasks.withType(KotlinCompile) {
    kotlinOptions {
        freeCompilerArgs += '-Xjsr305=strict'
        jvmTarget = '21'
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

hibernate {
    enhancement {
        enableAssociationManagement = true
    }
}

